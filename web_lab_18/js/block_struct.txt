PROVISIONAL BLOCK

HEADER
---
version
previous hash
merkle root: pending
time: pending (when miner starts the mining)
target: 3
nonce: pending
Hash : pending
---
TRANSACTIONS
---
Number transactions: including miner reward
---
Miner reward to: pending
Amount: 0.99
Hash: pending
---
List of other transactions

OLD =================================
function buildBlock() {

  // XXX HAVE TO PREVENT THIS RUNNING AGAIN BEFORE
  // XXX IT HAS BEEN VERIFIED AND ADDED TO BLOCKCHAIN

  // BLOCK HEADER CONTENTS
  // ---
  // version
  // previous hash
  // merkle root: pending
  // time: pending (when miner starts the mining)
  // target: 3
  // nonce: pending
  // Hash : pending
  // ---
  // TRANSACTIONS
  // ---
  // Number transactions: including miner reward
  // ---
  // Miner reward to: pending
  // Amount: 0.99
  // Hash: pending
  // ---
  // List of other transactions

  console.log('enter buildBlock');

  let el = document.getElementById('div_TEXTDIV_provisional_block');
  let elcont = el.innerHTML;
  elcont = Number(elcont);

  let elcontlen = elcont.length;
  console.log('elcontlen = ' + elcontlen + ', elcont = ' + elcont);

  if (elcont !== 0) {
    console.log('block still pending, can not build new block, exit buildBlock');
    return;
  }

  if (data['transaction']['numPending'] == 0) {
    console.log('no transactions, exit buildBlock');
    return;
  }

  // select random user as miner
  let p = Object.keys(data['people']);
  let np = p.length;
  let minerIndex = Math.floor(Math.random() * np); // returns a random integer from 0 to np-1
  let coinbase = "";
  coinbase += "Miner reward to: " + data['address'][minerIndex] + "<br>";
  coinbase += "Amount: " + data['block']['reward'] + "<br>";
  let cbhash = fMD2(coinbase);
  data['transaction'][0] = cbhash;
  data['transaction']['numPending'] += 1;
  coinbase += 'ID: ' + cbhash + '<br>';

  // GET MERKLE ROOT OF TRANSACTIONS
  console.log("data['transaction'][0] = " + data['transaction'][0]);
  let merkleRoot = getMerkleRoot();
  console.log('merkleRoot = ' + merkleRoot);
  console.log("root ?= data..[0] = " + data['transaction'][0]);

  // UPDATE BLOCK NUMBER
  let bc = data['block']['number'];
  bc += 1;
  data['block']['number'] = bc;

  let tHeader = 'Version: ' + data['version'] + '<br>';
  tHeader += 'Block number: ' + bc + '<br>';
  tHeader += 'Previous hash: ' + data['block']['previous'] + '<br>';
  tHeader += 'Number transactions: ' + data['transaction']['numPending'] + '<br>';
  tHeader += 'Merkle root: ' + merkleRoot + '<br>';
  let d = new Date(); // or let d = Date.now() for ms since Jan 1, 1970
  tHeader += 'Date: ' + d + '<br>';
  tHeader += 'Target: ' + data['target'] + '<br>';
  data['header'] = tHeader;

  // WRAP UP
  el = document.getElementById('div_TEXTDIV_provisional_block');
  let el2 = document.getElementById('div_TEXTDIV_transactions_pending');
  let ttrans = el2.innerHTML;
  let sep = '---------------------------<br>';
  el.innerHTML = tHeader + sep + coinbase + sep + ttrans;
  data['transaction']['pendingList'] = ttrans;
  data['transaction']['numPending'] = 0;
  el2.innerHTML = '';

  console.log('exit buildBlock');
} // END of function buildBlock
