EXAMPLES OF DEFINING A UNIT WITH A (1) CLASS DEFINITION OR A (2) CONSTRUCTOR FUNCTION  

=====================================================  

WEB LAB 5 

-------------------------------------------------- 

FILE puBioRxrFeed_CLASS_DEFINITION.js  

class puBioRxrFeed {

  constructor(pUnitIndex) {
    this.unitIndex = pUnitIndex; // index of this unit as child in processUnits parent object
    // unitIndex used in this object's updateUIparams() method
  }

  // *****************************************
  //    define and get INPUT CONNECTIONS
  // *****************************************

--------------------------------------------------  

FILE puBioRxrFeed_CONSTRUCTOR_FUNC.js  

function puBioReactor(pUnitIndex) {
  // constructor function for process unit
  //
  // for other info shared with other units and objects, see public properties
  // and search for controller. & interfacer. & plotter. & simParams. & plotInfo

  // *****************************************
  //       define INPUT CONNECTIONS
  // *****************************************

------------------------------------------------- 

THE CLASS DEFINITION IS USED IN THE CURRENT IMPLEMENTATION OF THIS LAB 

FILE puBioRxrFeed.js  

class puBioRxrFeed {

  constructor(pUnitIndex) {
    this.unitIndex = pUnitIndex; // index of this unit as child in processUnits parent object
    // unitIndex used in this object's updateUIparams() method
  }

  // *****************************************
  //    define and get INPUT CONNECTIONS
  // ***************************************** 

------------------------------------------------- 

FILE index.html 

<!-- load SPECIFIC JAVASCRIPT for this lab FIRST-->
  <script language="javascript" src="js/process_sim_params.js" type="text/javascript"></script>
  <script language="javascript" src="js/puBioRxrFeed.js" type="text/javascript"></script>
  <script language="javascript" src="js/puBioRxrController.js" type="text/javascript"></script>
  <script language="javascript" src="js/puBioreactor.js" type="text/javascript"></script>
  <script language="javascript" src="js/process_units.js" type="text/javascript"></script>
  <script language="javascript" src="js/process_plot_info.js" type="text/javascript"></script>

------------------------------------------------- 

FILE process_units.js

let processUnits = new Object();
// assign process unit objects to this object
// as indexed child objects in order to allow object controller
// to access them in a repeat with numeric index
// the numeric order of process units does not affect the simulation
// contents must be only the process units as child objects
// child objects optionally can be defined in separate script files, which
// makes them easier to edit,
// then inserted into processUnits, e.g.,
// USING CONSTRUCTOR FUNCTION OR CLASS DEFINITION...
//   processUnits[0] = new puHeatExchanger(0); // [] and () index # must match
// OR USING OBJECT
//   processUnits[0] = puHeatExchanger; // puHeatExchanger is an object
//   processUnits[0].unitIndex = 0; // assign unitIndex to match processUnits index
// then object cleared for garbage collection, e.g.,
//   puHeatExchanger = null; // puHeatExchanger is an object
// WARNING: if reorder unit index numbers, then need to edit         << SEE NOTE BELOW << 
//   those numbers in each unit's private inputs array

processUnits[0] = new puBioRxrFeed(0);
processUnits[1] = new puBioReactor(1);
processUnits[2] = new puBioRxrController(2); 

=====================================================  

SEE WARNING at bottom process_units.js 

The "private inputs array" means definition of the input connections to the unit, e.g., from WEB LAB WEB LAB 1:

function puWaterTank(pUnitIndex) {
  // constructor function for process unit
  //
  // for other info shared with other units and objects, see public properties
  // and search for controller. & interfacer. & plotter. & simParams. & plotInfo

  // *******************************************
  //  define INPUT CONNECTIONS from other units
  // *******************************************

  // define this unit's variables that are to receive input values from other units
  let flowRate = 0; // input flow rate from feed process unit
  let command = 0; // input command from controller process unit

  this.updateInputs = function() {
    flowRate = processUnits[0].flowRate;
    command = processUnits[2].command;
  }

